#!/bin/zsh

HTTPIE=${HTTPIE_EXECUTABLE:-httpie}

function cleanup() {
	echo $(echo -e "$*" | tr -d '\n' | tr -d '\r' )
}

LINE=
SOURCE=
COLORS=y
DEBUG=
TRACE=
CURL_VERBOSE=
URLENCODE=
DRY_RUN=
SILENT=

while [[ $# > 0 ]]; do
	case "$1" in
		-U|--urlencode)
			URLENCODE=y
			shift
			;;

		--no-colors|--monochrome)
			COLORS=n
			shift
			;;

		-v|--verbose)
			DEBUG=y
			shift
			;;

		-vv|--very-verbose)
			DEBUG=y
			TRACE=y
			CURL_VERBOSE=-v
			shift
			;;

		--dry-run)
			DRY_RUN=y
			shift
			;;

		-)
			SOURCE=
			shift
			;;

		--)
			shift
			LINE="$*"
			break
			;;
		*)
			SOURCE=$1
			shift
			;;
	esac
done

if [ -n "$LINE" ]; then
	eval $HTTPIE $LINE
	exit 0
fi

METHOD=GET
URL='http://localhost'
HTTP='HTTP/1.1'
HEADERS=
SECTION=url

BODY=$(mktemp)
RESPONSE=$(mktemp)
trap "rm -f $BODY $RESPONSE" 0 1 2 5 15

while read LINE; do
	LINE=$(echo -e $(cleanup $LINE) | sed -E 's/{{([^}]*)}}/${\1}/g' | envsubst )
	case "$SECTION" in
		url)
			method=$(echo $LINE | awk '{print $1}')
			[ -n "$method" ] && METHOD=$method

			url=$(echo $LINE | awk '{print $2}')
			[ -n "$url" ] && URL=$url

			http=$(echo $LINE | awk '{print $3}')
			[ -n "$http" ] && HTTP=$http

			SECTION=headers
			;;

		headers)
			if [ -n "$LINE" ]; then
				if [[ ${LINE:l} =~ ^x-http ]]; then
					[ -n "$TRACE" ] && echo "Custom Header: $LINE"

					NAME=$(echo ${LINE:l} | cut -d: -f1 | tr -d " ")
					VALUE=$(echo ${LINE:l} | cut -d: -f2- | tr -d " ")
					case "$NAME" in
						x-http-body)
							case "$VALUE" in
								urlencode)
									URLENCODE=y
									;;
								*)
									echo Unrecognized body processor: $VALUE
									;;
							esac
							;;

						*)
							echo Unrecognized custom header: $LINE
							;;
					esac
				else
					HEADERS=$HEADERS\ -H\ \"$LINE\"
				fi
			else 
				SECTION=body
			fi
			;;

		body)
			echo $LINE >> $BODY
			;;
	esac

done <<< $(cat $SOURCE | grep -v "^\\/\\*"  )

[ -z "$TRACE" ] && SILENT="--silent"
CMDLINE="curl $CURL_VERBOSE $SILENT --include -X $METHOD $HEADERS"

if [ -n "$URLENCODE" ]; then
	ENCODED=
	AWK_CSV="awk -F ',,|^\"|\",\"|\",|,\"|\"$'"
	while IFS=$'\t' read -r NAME VALUE; do

		[ -n "$TRACE" ] && echo Encoding: $NAME=$VALUE

		PAR="$(echo $NAME | tr -d '\n' | jq -sRr @uri)=$(echo $VALUE | tr -d '\n' | jq -sRr @uri)"

		[ -n "$ENCODED" ] && ENCODED=$ENCODED\&
		ENCODED="$ENCODED$PAR"

	done <<< $(cat $BODY | jq -r ' to_entries[] | [.key, .value] | @tsv')
	echo $ENCODED > $BODY
fi

CMDLINE="$CMDLINE -d \"@${BODY}\""
CMDLINE="$CMDLINE --output $RESPONSE \"$URL\""

[ -n "$DEBUG" ] && echo Command line: $CMDLINE 
[ -n "$TRACE" ] && printf "Body:\n" && cat $BODY

if [ -z "$DRY_RUN" ]; then
	eval $CMDLINE

	CONTENT=text/plain
	SECTION=headers

	if [ -f $RESPONSE ]; then
		#echo "----"
		#cat $RESPONSE
		#echo "----"
		while read LINE; do
			case "$SECTION" in
				headers)
					LINE=$(cleanup $LINE )
					if [ -n "$LINE" ]; then
						[ -n "$TRACE" ] && echo $LINE
						[[ "$LINE" =~ ^[Cc]ontent-[Tt]ype ]] && CONTENT=$(echo $LINE | awk '{print $2}')
					else 
						SECTION=body
						echo -n "" > $BODY
						echo ""
					fi
					;;

				body)
					echo -e "$LINE" >> $BODY
					;;
			esac

		done <<< $(cat $RESPONSE | sed -r 's/\\/\\\\/g' )
	fi

	if [ -f $BODY ]; then
		case $CONTENT in
			application/json)
				[ "$COLORS" = "y" ] && JQ=-C || JQ=-M
				cat $BODY | jq $JQ
				;;
			*)
				cat $BODY
				;;
		esac
	fi

fi	
