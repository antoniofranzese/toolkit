#!/bin/zsh
#
# kubectl wrapper 0.4
#
function execute() {
	CMD="$*"
	echo $CMD | clip-copy --tee
	eval $CMD
}

KUBECTL=${KUBECTL_EXECUTABLE:-/usr/bin/kubectl}
ME=$(basename $0)

case ${1:-help} in
pod|pods)
	$KUBECTL get pods --all-namespaces \
		| fzf \
			--header-lines=1 \
			--header="^R=Reload List  ^P=Refresh Preview" \
			--preview-window=up:60% \
			--preview "$KUBECTL describe pod {2} -n {1} | bat -l yaml --color=always --style=plain" \
			--bind="ctrl-r:reload($KUBECTL get pods --all-namespaces)" \
			--bind="ctrl-p:refresh-preview" \
		| awk '{split($0,a," "); print a[2],"--namespace",a[1]}' | clip-copy --tee
	;;

dep|deps)
	$KUBECTL get deployments --all-namespaces \
		| fzf \
			--header-lines=1 \
			--header="^R=Reload List  ^P=Refresh Preview" \
			--preview-window=up:60% \
			--preview "$KUBECTL describe deployment {2} -n {1} | bat -l yaml --color=always --style=plain" \
			--bind="ctrl-r:reload($KUBECTL get deployments --all-namespaces)" \
			--bind="ctrl-p:refresh-preview" \
		| awk '{split($0,a," "); print a[2],"--namespace",a[1]}' | clip-copy --tee
	;;

maps)
	$KUBECTL get configmaps --all-namespaces \
		| fzf \
			--header-lines=1 \
			--header "^S=Save" \
			--preview-window=up:60% \
			--preview "$KUBECTL get configmap {2} -n {1} -o yaml | bat -l yaml --color=always --style=plain" \
			--bind "ctrl-s:execute($KUBECTL get configmap {2} -n {1} -o yaml > {2}.yaml)" \
		| awk '{split($0,a," "); print a[2],"--namespace",a[1]}' | clip-copy --tee
	;;

secrets)
	$KUBECTL get secrets --all-namespaces \
		| fzf \
			--header-lines=1 \
			--preview-window=up:60% \
			--preview "$KUBECTL get secret {2} -n {1} -o yaml | bat -l yaml --color=always --style=plain" \
		| awk '{split($0,a," "); print a[2],"--namespace",a[1]}' | clip-copy --tee
	;;

exec)
	EXEC=${2:-/bin/sh}
	execute $KUBECTL exec --stdin --tty `$ME pod` -- $EXEC
	;;

shell)
	$0 exec /bin/sh
	;;

follow)
	if [ -z "$2" ]; then
		POD=`$ME pod` 
	else
		shift
		POD=$*
	fi
	execute $KUBECTL logs --follow $POD
	;;

forward)
	[ -z "$2" ] && echo Missing port number && exit 0
	execute $KUBECTL port-forward `$ME pod` ${3:-$2}:$2
	;;

restart)
	$KUBECTL get deployments --all-namespaces \
		| fzf -m \
			--header-lines=1 \
			--preview-window=up:60% \
			--preview "kubectl describe deployment {2} -n {1} | bat -l yaml --color=always --style=plain" \
		| awk '{ print $2, $1}' \
		| xargs -n2 sh -c echo\ $KUBECTL' rollout restart deployment $1 --namespace $2' argv0 | clip-copy --tee
    ;;

scale)
	REPS=${2:-0}
	$KUBECTL get deployments --all-namespaces \
		| fzf -m \
			--header-lines=1 \
			--preview-window=up:60% \
			--preview "$KUBECTL describe deployment {2} -n {1} | bat -l yaml --color=always --style=plain" \
		| awk '{ print $2, $1}' \
		| xargs -n2 sh -c echo\ $KUBECTL' scale deployment $1 --namespace $2 --replicas='$REPS argv0 | clip-copy --tee
	;;

export)
	shift
	case ${1:-help} in
	secret)
		shift
		[ -n "$1" ] && SECRET="$*" || SECRET=`$ME secrets`
		eval $KUBECTL get secret $SECRET -o yaml \
			| yq eval 'del(.metadata.resourceVersion)' - \
			| yq eval 'del(.metadata.uid)' - \
			| yq eval 'del(.metadata.annotations)' - \
			| yq eval 'del(.metadata.creationTimestamp)' - \
			| yq eval 'del(.metadata.selfLink)' - \
			| yq eval 'del(.metadata.namespace)' - \
		;;
	help)
		echo $ME export [ secret ]
		;;
	esac
	;;

copy-secret)
	shift
	if [ -z "$3" ]; then
		echo "$ME copy-secret <secret> <source namespace> <target namespace>"
		exit 0
	else
		#$ME export secret $1 -n $2 | $KUBECTL apply --namespace=$3 -f -
		$KUBECTL get secret $1 -n $2 -o yaml \
			| yq eval 'del(.metadata.resourceVersion)' - \
			| yq eval 'del(.metadata.uid)' - \
			| yq eval 'del(.metadata.annotations)' - \
			| yq eval 'del(.metadata.creationTimestamp)' - \
			| yq eval 'del(.metadata.selfLink)' - \
			| yq eval 'del(.metadata.namespace)' - \
			| $KUBECTL apply --namespace=$3 -f -
	fi
	;;

help)
	echo $(basename $ME) \<command\> \<arguments\>
	echo
	echo "Pod commands:"
	echo "  pods                        Returns kubectl pod params"
	echo "  exec  <cmd>                 Executes command in pod"
	echo "  shell                       Open shell in pod"
	echo "  follow                      Follows pod log"
	echo "  forward <remote> [<local>]  Forwards pod port to local port"
	echo
	echo "Deployment commands:"
	echo "  deps                        Returns kubectl deployment params"
	echo "  restart                     Rollout restart deployment"
	echo "  scale <replicas>            Scale deployment"
	echo
	;;

*)
	$KUBECTL "$@"
	;;

esac
